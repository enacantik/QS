Standar SQL mendefinisikan BLOB sebagai objek besar biner untuk menyimpan data biner dalam database. Dengan tipe data BLOB, Anda dapat menyimpan konten gambar, dokumen, dll. ke dalam tabel.

PostgreSQL tidak mendukung BLOB tetapi Anda dapat menggunakan tipe data BYTEA untuk menyimpan data biner.

Mari kita lihat part_drawingstabelnya.

bagian_bagian_gambar_tabel
Tabel part_drawingsmenyimpan gambar bagian dalam drawing_datakolom. Kami akan menunjukkan cara memasukkan data biner ke dalam kolom ini dan membacanya kembali.

Masukkan BLOB ke dalam tabel
Untuk menyisipkan data BLOB ke dalam tabel, Anda menggunakan langkah-langkah berikut:

Pertama, membaca data dari sebuah file.
Selanjutnya, sambungkan ke database PostgreSQL dengan membuat objek koneksi baru dari connect()fungsi.
Kemudian, buat cursorobjek dari connectionobjek tersebut.
Setelah itu, jalankan pernyataan INSERT dengan nilai input. Untuk data BLOB, Anda menggunakan Binaryobjek modul psycopg
Terakhir, komit perubahan secara permanen ke database PostgreSQL dengan memanggil commit()metode connectionobjek.
Fungsi berikut write_blob()membaca data biner dari file yang ditentukan oleh path_to_fileparameter dan memasukkannya ke dalam part_drawingstabel.

#!/usr/bin/python
import psycopg2
from config import config


def write_blob(part_id, path_to_file, file_extension):
    """ insert a BLOB into a table """
    conn = None
    try:
        # read data from a picture
        drawing = open(path_to_file, 'rb').read()
        # read database configuration
        params = config()
        # connect to the PostgresQL database
        conn = psycopg2.connect(**params)
        # create a new cursor object
        cur = conn.cursor()
        # execute the INSERT statement
        cur.execute("INSERT INTO part_drawings(part_id,file_extension,drawing_data) " +
                    "VALUES(%s,%s,%s)",
                    (part_id, file_extension, psycopg2.Binary(drawing)))
        # commit the changes to the database
        conn.commit()
        # close the communication with the PostgresQL database
        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        if conn is not None:
            conn.close()
Bahasa kode:  Python  ( python )
Cuplikan berikut memanggil write_blob ()fungsi dua kali untuk menyisipkan dua bagian baru dengan data biner yang sesuai dari file gambar ke dalam part_drawingstabel.

if __name__ == '__main__':
    write_blob(1, 'images/simtray.jpg', 'jpg')
    write_blob(2, 'images/speaker.jpg', 'jpg')
Bahasa kode:  Python  ( python )
Baca BLOB di tabel
Langkah-langkah membaca BLOB dari tabel mirip dengan langkah-langkah query data dari tabel. Setelah mengambil data biner dari tabel, kita dapat menyimpan ke file, mengeluarkannya ke browser web, dll.

Fungsi berikut read_blob()memilih data BLOB dari part_drawingstabel berdasarkan id bagian tertentu dan menyimpan data BLOB ke file.

def read_blob(part_id, path_to_dir):
    """ read BLOB data from a table """
    conn = None
    try:
        # read database configuration
        params = config()
        # connect to the PostgresQL database
        conn = psycopg2.connect(**params)
        # create a new cursor object
        cur = conn.cursor()
        # execute the SELECT statement
        cur.execute(""" SELECT part_name, file_extension, drawing_data
                        FROM part_drawings
                        INNER JOIN parts on parts.part_id = part_drawings.part_id
                        WHERE parts.part_id = %s """,
                    (part_id,))

        blob = cur.fetchone()
        open(path_to_dir + blob[0] + '.' + blob[1], 'wb').write(blob[2])
        # close the communication with the PostgresQL database
        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        if conn is not None:
            conn.close()
Bahasa kode:  Python  ( python )
Cuplikan berikut membaca data biner dari bagian dengan nilai id 1 dan 2, dan menyimpan data biner ke images/blobfolder.

Dalam tutorial ini, Anda telah belajar bagaimana menangani data BLOB PostgreSQL dengan Python menggunakan adaptor database psycopg.