Pengantar transaksi di psycopg
Dalam psycopg, connectionkelas bertanggung jawab untuk menangani transaksi. Saat Anda mengeluarkan pernyataan SQL pertama ke database PostgreSQL menggunakan cursorobjek, psycopg membuat transaksi baru .

Sejak saat itu, psycopg mengeksekusi semua pernyataan berikutnya dalam transaksi yang sama. Jika ada pernyataan yang gagal, psycopg akan membatalkan transaksi.

Kelas connectionmemiliki dua metode untuk mengakhiri transaksi: commit()dan rollback(). Jika Anda ingin melakukan semua perubahan ke database PostgreSQL secara permanen, Anda memanggil commit()metode. Dan jika Anda ingin membatalkan perubahan, Anda memanggil rollback()metode. Menutup objek koneksi atau menghancurkannya menggunakan perintah   deljuga akan menghasilkan rollback implisit.

Penting untuk diperhatikan bahwa SELECTpernyataan sederhana akan memulai transaksi yang dapat mengakibatkan efek yang tidak diinginkan seperti tabel mengasapi dan mengunci. Oleh karena itu, jika Anda mengembangkan aplikasi yang berumur panjang, Anda harus memanggil metode commit()or rollback()sebelum membiarkan koneksi tidak digunakan untuk waktu yang lama.

Atau, Anda dapat mengatur autocommitatribut connectionobjek ke True. Ini memastikan bahwa psycopg mengeksekusi setiap pernyataan dan segera mengkomitnya.

Mode autocommitini juga berguna ketika Anda mengeksekusi pernyataan yang diperlukan untuk mengeksekusi di luar transaksi seperti CREATE DATABASE   dan VACUUM.

Berikut ini menunjukkan pola khas untuk menangani transaksi di psycopg:

#!/usr/bin/python

import psycopg2

conn = None
try:
    conn = psycopg2.connect(dsn)
    cur = conn.cursor()
    # execute 1st statement
    cur.execute(statement_1)
    # execute 2nd statement
    cur.execute(statement_1)
    # commit the transaction
    conn.commit()
    # close the database communication
    cur.close()
except psycopg2.DatabaseError as error:
    print(error)
finally:
    if conn is not None:
        conn.close()
Bahasa kode:  Python  ( python )
Contoh transaksi Postgres Python
Kami akan menggunakan partsdan vendor_partstabel yang kami buat dalam tutorial membuat tabel untuk demonstrasi.

bagian_vendor_tabel
Misalkan Anda perlu menambahkan suku cadang baru dan menugaskan vendor yang memasok suku cadang secara bersamaan. Untuk melakukan ini, pertama, Anda memasukkan baris baru ke dalam partstabel dan mendapatkan id bagian. Kemudian, Anda menyisipkan baris ke dalam vendor_partstabel. Fungsi berikut add_part()menunjukkan ide:

#!/usr/bin/python
import psycopg2
from config import config


def add_part(part_name, vendor_list):
    # statement for inserting a new row into the parts table
    insert_part = "INSERT INTO parts(part_name) VALUES(%s) RETURNING part_id;"
    # statement for inserting a new row into the vendor_parts table
    assign_vendor = "INSERT INTO vendor_parts(vendor_id,part_id) VALUES(%s,%s)"

    conn = None
    try:
        params = config()
        conn = psycopg2.connect(**params)
        cur = conn.cursor()
        # insert a new part
        cur.execute(insert_part, (part_name,))
        # get the part id
        part_id = cur.fetchone()[0]
        # assign parts provided by vendors
        for vendor_id in vendor_list:
            cur.execute(assign_vendor, (vendor_id, part_id))

        # commit changes
        conn.commit()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        if conn is not None:
            conn.close()
Bahasa kode:  Python  ( python )
Untuk menguji add_part()fungsi, kami memanggilnya untuk menyisipkan beberapa bagian dan menetapkannya ke masing-masing vendor sebagai berikut:

if __name__ == '__main__':
    add_part('SIM Tray', (1, 2))
    add_part('Speaker', (3, 4))
    add_part('Vibrator', (5, 6))
    add_part('Antenna', (6, 7))
    add_part('Home Button', (1, 5))
    add_part('LTE Modem', (1, 5))
Bahasa kode:  Python  ( python )
Mari kita query tabel partsdan vendor_partsuntuk mengkonfirmasi transaksi.

suppliers=# select * from parts;
 part_id |  part_name
---------+-------------
       1 | SIM Tray
       2 | Speaker
       3 | Vibrator
       4 | Antenna
       5 | Home Button
       6 | LTE Modem
(6 rows)

suppliers=# select * from vendor_parts;
 vendor_id | part_id
-----------+---------
         1 |       1
         2 |       1
         3 |       2
         4 |       2
         5 |       3
         6 |       3
         6 |       4
         7 |       4
         1 |       5
         5 |       5
         1 |       6
         5 |       6
(12 rows)
Bahasa kode:  SQL (Structured Query Language)  ( sql )
Seperti yang Anda lihat, kami telah berhasil memasukkan data ke keduanya partsdan vendor_partstabel.

Mari kita masukkan bagian lain, tapi kali ini, kita menggunakan id vendor yang tidak valid dengan sengaja untuk tujuan demonstrasi. Program tidak boleh menambahkan bagian baru tanpa menugaskannya ke vendor.

# no rows inserted into the parts and vendor_parts tables
add_part('Power Amplifier', (99,))
Bahasa kode:  Python  ( python )
Pengecualian terjadi.

insert or update on table "vendor_parts" violates foreign key constraint "vendor_parts_vendor_id_fkey"
DETAIL:  Key (vendor_id)=(99) is not present in table "vendors".
Bahasa kode:  JavaScript  ( javascript )
Kami meminta data dari partsdan vendor_parts tabel lagi, tidak ada data baru, oleh karena itu, fungsi berfungsi seperti yang diharapkan.

Transaksi menggunakan withpernyataan
Mulai dari psycopg 2.5, koneksi dan kursor adalah Manajer Konteks dan oleh karena itu Anda dapat menggunakannya dengan withpernyataan:

with psycopg2.connect(dsn) as conn:
    with conn.cursor() as cur:
        cur.execute(sql)
Bahasa kode:  Python  ( python )
Psycopg melakukan transaksi jika tidak ada pengecualian yang terjadi di dalam withblok, dan jika tidak, ia akan membatalkan transaksi.

Tidak seperti objek manajer konteks lainnya , keluar dari withblok tidak menutup koneksi tetapi hanya mengakhiri transaksi. Akibatnya, Anda dapat menggunakan connectionobjek yang sama dalam pernyataan berikutnya withdalam transaksi lain sebagai berikut:

conn = psycopg2.connect(dsn)

# transaction 1
with conn:
    with conn.cursor() as cur:
        cur.execute(sql)

# transaction 2
with conn:
    with conn.cursor() as cur:
        cur.execute(sql)

conn.close()
Bahasa kode:  Python  ( python )
Dalam tutorial ini, Anda telah mempelajari cara menggunakan transaksi psycopg dan cara menggunakan transaksi untuk memasukkan data ke dalam database PostgreSQL.